// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msgColumn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DynamicData.Protos {

  /// <summary>Holder for reflection information generated from msgColumn.proto</summary>
  public static partial class MsgColumnReflection {

    #region Descriptor
    /// <summary>File descriptor for msgColumn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgColumnReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9tc2dDb2x1bW4ucHJvdG8SBWRkYXRhGh5nb29nbGUvcHJvdG9idWYvd3Jh",
            "cHBlcnMucHJvdG8imgUKD1N5c0NvbHVtblN0cnVjdBIKCgJpZBgBIAEoCRIP",
            "Cgd0YWJsZUlkGAIgASgJEgwKBG5hbWUYAyABKAkSEAoIZGF0YVR5cGUYBCAB",
            "KAUSEQoJbWF4TGVuZ3RoGAUgASgFEjIKDGRlZmF1bHRWYWx1ZRgGIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIyCgxjdXN0b21UeXBlSWQY",
            "ByABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSEQoJaXNOdWxh",
            "YmxlGAggASgIEhQKDGZpZWxkT3B0aW9ucxgJIAEoBRITCgtkaXNwbGF5TmFt",
            "ZRgKIAEoCRITCgtkaXNwbGF5VHlwZRgLIAEoBRIxCgtwbGFjZUhvbGRlchgM",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRItCgd0b29sdGlw",
            "GA0gASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEhEKCWZpZWxk",
            "VHlwZRgOIAEoBRI2ChBSZWZlcmVuY2VUYWJsZUlkGA8gASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEjcKEXJlZmVyZW5jZUNvbHVtbklkGBAg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjYKEHJlZmVyZW5j",
            "ZVRleHQxSWQYESABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUS",
            "NgoQcmVmZXJlbmNlVGV4dDJJZBgSIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5T",
            "dHJpbmdWYWx1ZRIPCgdvcmRpbmFsGBMgASgFEhUKDWZpbHRlck9yZGluYWwY",
            "FCABKAUiUwoSTGlzdENvbHVtblJlc3BvbnNlEhQKDHRvdGFsUmVjb3JkcxgB",
            "IAEoBRInCgdjb2x1bW5zGAIgAygLMhYuZGRhdGEuU3lzQ29sdW1uU3RydWN0",
            "QhWqAhJEeW5hbWljRGF0YS5Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DynamicData.Protos.SysColumnStruct), global::DynamicData.Protos.SysColumnStruct.Parser, new[]{ "Id", "TableId", "Name", "DataType", "MaxLength", "DefaultValue", "CustomTypeId", "IsNulable", "FieldOptions", "DisplayName", "DisplayType", "PlaceHolder", "Tooltip", "FieldType", "ReferenceTableId", "ReferenceColumnId", "ReferenceText1Id", "ReferenceText2Id", "Ordinal", "FilterOrdinal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DynamicData.Protos.ListColumnResponse), global::DynamicData.Protos.ListColumnResponse.Parser, new[]{ "TotalRecords", "Columns" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SysColumnStruct : pb::IMessage<SysColumnStruct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SysColumnStruct> _parser = new pb::MessageParser<SysColumnStruct>(() => new SysColumnStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysColumnStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynamicData.Protos.MsgColumnReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysColumnStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysColumnStruct(SysColumnStruct other) : this() {
      id_ = other.id_;
      tableId_ = other.tableId_;
      name_ = other.name_;
      dataType_ = other.dataType_;
      maxLength_ = other.maxLength_;
      DefaultValue = other.DefaultValue;
      CustomTypeId = other.CustomTypeId;
      isNulable_ = other.isNulable_;
      fieldOptions_ = other.fieldOptions_;
      displayName_ = other.displayName_;
      displayType_ = other.displayType_;
      PlaceHolder = other.PlaceHolder;
      Tooltip = other.Tooltip;
      fieldType_ = other.fieldType_;
      ReferenceTableId = other.ReferenceTableId;
      ReferenceColumnId = other.ReferenceColumnId;
      ReferenceText1Id = other.ReferenceText1Id;
      ReferenceText2Id = other.ReferenceText2Id;
      ordinal_ = other.ordinal_;
      filterOrdinal_ = other.filterOrdinal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysColumnStruct Clone() {
      return new SysColumnStruct(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataType" field.</summary>
    public const int DataTypeFieldNumber = 4;
    private int dataType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "maxLength" field.</summary>
    public const int MaxLengthFieldNumber = 5;
    private int maxLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLength {
      get { return maxLength_; }
      set {
        maxLength_ = value;
      }
    }

    /// <summary>Field number for the "defaultValue" field.</summary>
    public const int DefaultValueFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_defaultValue_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string defaultValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = value;
      }
    }


    /// <summary>Field number for the "customTypeId" field.</summary>
    public const int CustomTypeIdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_customTypeId_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string customTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomTypeId {
      get { return customTypeId_; }
      set {
        customTypeId_ = value;
      }
    }


    /// <summary>Field number for the "isNulable" field.</summary>
    public const int IsNulableFieldNumber = 8;
    private bool isNulable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNulable {
      get { return isNulable_; }
      set {
        isNulable_ = value;
      }
    }

    /// <summary>Field number for the "fieldOptions" field.</summary>
    public const int FieldOptionsFieldNumber = 9;
    private int fieldOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldOptions {
      get { return fieldOptions_; }
      set {
        fieldOptions_ = value;
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 10;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayType" field.</summary>
    public const int DisplayTypeFieldNumber = 11;
    private int displayType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayType {
      get { return displayType_; }
      set {
        displayType_ = value;
      }
    }

    /// <summary>Field number for the "placeHolder" field.</summary>
    public const int PlaceHolderFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_placeHolder_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string placeHolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaceHolder {
      get { return placeHolder_; }
      set {
        placeHolder_ = value;
      }
    }


    /// <summary>Field number for the "tooltip" field.</summary>
    public const int TooltipFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_tooltip_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string tooltip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tooltip {
      get { return tooltip_; }
      set {
        tooltip_ = value;
      }
    }


    /// <summary>Field number for the "fieldType" field.</summary>
    public const int FieldTypeFieldNumber = 14;
    private int fieldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FieldType {
      get { return fieldType_; }
      set {
        fieldType_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceTableId" field.</summary>
    public const int ReferenceTableIdFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_referenceTableId_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string referenceTableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceTableId {
      get { return referenceTableId_; }
      set {
        referenceTableId_ = value;
      }
    }


    /// <summary>Field number for the "referenceColumnId" field.</summary>
    public const int ReferenceColumnIdFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _single_referenceColumnId_codec = pb::FieldCodec.ForClassWrapper<string>(130);
    private string referenceColumnId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceColumnId {
      get { return referenceColumnId_; }
      set {
        referenceColumnId_ = value;
      }
    }


    /// <summary>Field number for the "referenceText1Id" field.</summary>
    public const int ReferenceText1IdFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _single_referenceText1Id_codec = pb::FieldCodec.ForClassWrapper<string>(138);
    private string referenceText1Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceText1Id {
      get { return referenceText1Id_; }
      set {
        referenceText1Id_ = value;
      }
    }


    /// <summary>Field number for the "referenceText2Id" field.</summary>
    public const int ReferenceText2IdFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _single_referenceText2Id_codec = pb::FieldCodec.ForClassWrapper<string>(146);
    private string referenceText2Id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceText2Id {
      get { return referenceText2Id_; }
      set {
        referenceText2Id_ = value;
      }
    }


    /// <summary>Field number for the "ordinal" field.</summary>
    public const int OrdinalFieldNumber = 19;
    private int ordinal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ordinal {
      get { return ordinal_; }
      set {
        ordinal_ = value;
      }
    }

    /// <summary>Field number for the "filterOrdinal" field.</summary>
    public const int FilterOrdinalFieldNumber = 20;
    private int filterOrdinal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FilterOrdinal {
      get { return filterOrdinal_; }
      set {
        filterOrdinal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SysColumnStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SysColumnStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TableId != other.TableId) return false;
      if (Name != other.Name) return false;
      if (DataType != other.DataType) return false;
      if (MaxLength != other.MaxLength) return false;
      if (DefaultValue != other.DefaultValue) return false;
      if (CustomTypeId != other.CustomTypeId) return false;
      if (IsNulable != other.IsNulable) return false;
      if (FieldOptions != other.FieldOptions) return false;
      if (DisplayName != other.DisplayName) return false;
      if (DisplayType != other.DisplayType) return false;
      if (PlaceHolder != other.PlaceHolder) return false;
      if (Tooltip != other.Tooltip) return false;
      if (FieldType != other.FieldType) return false;
      if (ReferenceTableId != other.ReferenceTableId) return false;
      if (ReferenceColumnId != other.ReferenceColumnId) return false;
      if (ReferenceText1Id != other.ReferenceText1Id) return false;
      if (ReferenceText2Id != other.ReferenceText2Id) return false;
      if (Ordinal != other.Ordinal) return false;
      if (FilterOrdinal != other.FilterOrdinal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (MaxLength != 0) hash ^= MaxLength.GetHashCode();
      if (defaultValue_ != null) hash ^= DefaultValue.GetHashCode();
      if (customTypeId_ != null) hash ^= CustomTypeId.GetHashCode();
      if (IsNulable != false) hash ^= IsNulable.GetHashCode();
      if (FieldOptions != 0) hash ^= FieldOptions.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (DisplayType != 0) hash ^= DisplayType.GetHashCode();
      if (placeHolder_ != null) hash ^= PlaceHolder.GetHashCode();
      if (tooltip_ != null) hash ^= Tooltip.GetHashCode();
      if (FieldType != 0) hash ^= FieldType.GetHashCode();
      if (referenceTableId_ != null) hash ^= ReferenceTableId.GetHashCode();
      if (referenceColumnId_ != null) hash ^= ReferenceColumnId.GetHashCode();
      if (referenceText1Id_ != null) hash ^= ReferenceText1Id.GetHashCode();
      if (referenceText2Id_ != null) hash ^= ReferenceText2Id.GetHashCode();
      if (Ordinal != 0) hash ^= Ordinal.GetHashCode();
      if (FilterOrdinal != 0) hash ^= FilterOrdinal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (DataType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DataType);
      }
      if (MaxLength != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxLength);
      }
      if (defaultValue_ != null) {
        _single_defaultValue_codec.WriteTagAndValue(output, DefaultValue);
      }
      if (customTypeId_ != null) {
        _single_customTypeId_codec.WriteTagAndValue(output, CustomTypeId);
      }
      if (IsNulable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsNulable);
      }
      if (FieldOptions != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FieldOptions);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DisplayName);
      }
      if (DisplayType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DisplayType);
      }
      if (placeHolder_ != null) {
        _single_placeHolder_codec.WriteTagAndValue(output, PlaceHolder);
      }
      if (tooltip_ != null) {
        _single_tooltip_codec.WriteTagAndValue(output, Tooltip);
      }
      if (FieldType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FieldType);
      }
      if (referenceTableId_ != null) {
        _single_referenceTableId_codec.WriteTagAndValue(output, ReferenceTableId);
      }
      if (referenceColumnId_ != null) {
        _single_referenceColumnId_codec.WriteTagAndValue(output, ReferenceColumnId);
      }
      if (referenceText1Id_ != null) {
        _single_referenceText1Id_codec.WriteTagAndValue(output, ReferenceText1Id);
      }
      if (referenceText2Id_ != null) {
        _single_referenceText2Id_codec.WriteTagAndValue(output, ReferenceText2Id);
      }
      if (Ordinal != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Ordinal);
      }
      if (FilterOrdinal != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(FilterOrdinal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (DataType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DataType);
      }
      if (MaxLength != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxLength);
      }
      if (defaultValue_ != null) {
        _single_defaultValue_codec.WriteTagAndValue(ref output, DefaultValue);
      }
      if (customTypeId_ != null) {
        _single_customTypeId_codec.WriteTagAndValue(ref output, CustomTypeId);
      }
      if (IsNulable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsNulable);
      }
      if (FieldOptions != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FieldOptions);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DisplayName);
      }
      if (DisplayType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DisplayType);
      }
      if (placeHolder_ != null) {
        _single_placeHolder_codec.WriteTagAndValue(ref output, PlaceHolder);
      }
      if (tooltip_ != null) {
        _single_tooltip_codec.WriteTagAndValue(ref output, Tooltip);
      }
      if (FieldType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FieldType);
      }
      if (referenceTableId_ != null) {
        _single_referenceTableId_codec.WriteTagAndValue(ref output, ReferenceTableId);
      }
      if (referenceColumnId_ != null) {
        _single_referenceColumnId_codec.WriteTagAndValue(ref output, ReferenceColumnId);
      }
      if (referenceText1Id_ != null) {
        _single_referenceText1Id_codec.WriteTagAndValue(ref output, ReferenceText1Id);
      }
      if (referenceText2Id_ != null) {
        _single_referenceText2Id_codec.WriteTagAndValue(ref output, ReferenceText2Id);
      }
      if (Ordinal != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Ordinal);
      }
      if (FilterOrdinal != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(FilterOrdinal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
      }
      if (MaxLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLength);
      }
      if (defaultValue_ != null) {
        size += _single_defaultValue_codec.CalculateSizeWithTag(DefaultValue);
      }
      if (customTypeId_ != null) {
        size += _single_customTypeId_codec.CalculateSizeWithTag(CustomTypeId);
      }
      if (IsNulable != false) {
        size += 1 + 1;
      }
      if (FieldOptions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldOptions);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (DisplayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayType);
      }
      if (placeHolder_ != null) {
        size += _single_placeHolder_codec.CalculateSizeWithTag(PlaceHolder);
      }
      if (tooltip_ != null) {
        size += _single_tooltip_codec.CalculateSizeWithTag(Tooltip);
      }
      if (FieldType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldType);
      }
      if (referenceTableId_ != null) {
        size += _single_referenceTableId_codec.CalculateSizeWithTag(ReferenceTableId);
      }
      if (referenceColumnId_ != null) {
        size += _single_referenceColumnId_codec.CalculateSizeWithTag(ReferenceColumnId);
      }
      if (referenceText1Id_ != null) {
        size += _single_referenceText1Id_codec.CalculateSizeWithTag(ReferenceText1Id);
      }
      if (referenceText2Id_ != null) {
        size += _single_referenceText2Id_codec.CalculateSizeWithTag(ReferenceText2Id);
      }
      if (Ordinal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ordinal);
      }
      if (FilterOrdinal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FilterOrdinal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SysColumnStruct other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.MaxLength != 0) {
        MaxLength = other.MaxLength;
      }
      if (other.defaultValue_ != null) {
        if (defaultValue_ == null || other.DefaultValue != "") {
          DefaultValue = other.DefaultValue;
        }
      }
      if (other.customTypeId_ != null) {
        if (customTypeId_ == null || other.CustomTypeId != "") {
          CustomTypeId = other.CustomTypeId;
        }
      }
      if (other.IsNulable != false) {
        IsNulable = other.IsNulable;
      }
      if (other.FieldOptions != 0) {
        FieldOptions = other.FieldOptions;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.DisplayType != 0) {
        DisplayType = other.DisplayType;
      }
      if (other.placeHolder_ != null) {
        if (placeHolder_ == null || other.PlaceHolder != "") {
          PlaceHolder = other.PlaceHolder;
        }
      }
      if (other.tooltip_ != null) {
        if (tooltip_ == null || other.Tooltip != "") {
          Tooltip = other.Tooltip;
        }
      }
      if (other.FieldType != 0) {
        FieldType = other.FieldType;
      }
      if (other.referenceTableId_ != null) {
        if (referenceTableId_ == null || other.ReferenceTableId != "") {
          ReferenceTableId = other.ReferenceTableId;
        }
      }
      if (other.referenceColumnId_ != null) {
        if (referenceColumnId_ == null || other.ReferenceColumnId != "") {
          ReferenceColumnId = other.ReferenceColumnId;
        }
      }
      if (other.referenceText1Id_ != null) {
        if (referenceText1Id_ == null || other.ReferenceText1Id != "") {
          ReferenceText1Id = other.ReferenceText1Id;
        }
      }
      if (other.referenceText2Id_ != null) {
        if (referenceText2Id_ == null || other.ReferenceText2Id != "") {
          ReferenceText2Id = other.ReferenceText2Id;
        }
      }
      if (other.Ordinal != 0) {
        Ordinal = other.Ordinal;
      }
      if (other.FilterOrdinal != 0) {
        FilterOrdinal = other.FilterOrdinal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            DataType = input.ReadInt32();
            break;
          }
          case 40: {
            MaxLength = input.ReadInt32();
            break;
          }
          case 50: {
            string value = _single_defaultValue_codec.Read(input);
            if (defaultValue_ == null || value != "") {
              DefaultValue = value;
            }
            break;
          }
          case 58: {
            string value = _single_customTypeId_codec.Read(input);
            if (customTypeId_ == null || value != "") {
              CustomTypeId = value;
            }
            break;
          }
          case 64: {
            IsNulable = input.ReadBool();
            break;
          }
          case 72: {
            FieldOptions = input.ReadInt32();
            break;
          }
          case 82: {
            DisplayName = input.ReadString();
            break;
          }
          case 88: {
            DisplayType = input.ReadInt32();
            break;
          }
          case 98: {
            string value = _single_placeHolder_codec.Read(input);
            if (placeHolder_ == null || value != "") {
              PlaceHolder = value;
            }
            break;
          }
          case 106: {
            string value = _single_tooltip_codec.Read(input);
            if (tooltip_ == null || value != "") {
              Tooltip = value;
            }
            break;
          }
          case 112: {
            FieldType = input.ReadInt32();
            break;
          }
          case 122: {
            string value = _single_referenceTableId_codec.Read(input);
            if (referenceTableId_ == null || value != "") {
              ReferenceTableId = value;
            }
            break;
          }
          case 130: {
            string value = _single_referenceColumnId_codec.Read(input);
            if (referenceColumnId_ == null || value != "") {
              ReferenceColumnId = value;
            }
            break;
          }
          case 138: {
            string value = _single_referenceText1Id_codec.Read(input);
            if (referenceText1Id_ == null || value != "") {
              ReferenceText1Id = value;
            }
            break;
          }
          case 146: {
            string value = _single_referenceText2Id_codec.Read(input);
            if (referenceText2Id_ == null || value != "") {
              ReferenceText2Id = value;
            }
            break;
          }
          case 152: {
            Ordinal = input.ReadInt32();
            break;
          }
          case 160: {
            FilterOrdinal = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            DataType = input.ReadInt32();
            break;
          }
          case 40: {
            MaxLength = input.ReadInt32();
            break;
          }
          case 50: {
            string value = _single_defaultValue_codec.Read(ref input);
            if (defaultValue_ == null || value != "") {
              DefaultValue = value;
            }
            break;
          }
          case 58: {
            string value = _single_customTypeId_codec.Read(ref input);
            if (customTypeId_ == null || value != "") {
              CustomTypeId = value;
            }
            break;
          }
          case 64: {
            IsNulable = input.ReadBool();
            break;
          }
          case 72: {
            FieldOptions = input.ReadInt32();
            break;
          }
          case 82: {
            DisplayName = input.ReadString();
            break;
          }
          case 88: {
            DisplayType = input.ReadInt32();
            break;
          }
          case 98: {
            string value = _single_placeHolder_codec.Read(ref input);
            if (placeHolder_ == null || value != "") {
              PlaceHolder = value;
            }
            break;
          }
          case 106: {
            string value = _single_tooltip_codec.Read(ref input);
            if (tooltip_ == null || value != "") {
              Tooltip = value;
            }
            break;
          }
          case 112: {
            FieldType = input.ReadInt32();
            break;
          }
          case 122: {
            string value = _single_referenceTableId_codec.Read(ref input);
            if (referenceTableId_ == null || value != "") {
              ReferenceTableId = value;
            }
            break;
          }
          case 130: {
            string value = _single_referenceColumnId_codec.Read(ref input);
            if (referenceColumnId_ == null || value != "") {
              ReferenceColumnId = value;
            }
            break;
          }
          case 138: {
            string value = _single_referenceText1Id_codec.Read(ref input);
            if (referenceText1Id_ == null || value != "") {
              ReferenceText1Id = value;
            }
            break;
          }
          case 146: {
            string value = _single_referenceText2Id_codec.Read(ref input);
            if (referenceText2Id_ == null || value != "") {
              ReferenceText2Id = value;
            }
            break;
          }
          case 152: {
            Ordinal = input.ReadInt32();
            break;
          }
          case 160: {
            FilterOrdinal = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListColumnResponse : pb::IMessage<ListColumnResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListColumnResponse> _parser = new pb::MessageParser<ListColumnResponse>(() => new ListColumnResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListColumnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DynamicData.Protos.MsgColumnReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListColumnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListColumnResponse(ListColumnResponse other) : this() {
      totalRecords_ = other.totalRecords_;
      columns_ = other.columns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListColumnResponse Clone() {
      return new ListColumnResponse(this);
    }

    /// <summary>Field number for the "totalRecords" field.</summary>
    public const int TotalRecordsFieldNumber = 1;
    private int totalRecords_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRecords {
      get { return totalRecords_; }
      set {
        totalRecords_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DynamicData.Protos.SysColumnStruct> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(18, global::DynamicData.Protos.SysColumnStruct.Parser);
    private readonly pbc::RepeatedField<global::DynamicData.Protos.SysColumnStruct> columns_ = new pbc::RepeatedField<global::DynamicData.Protos.SysColumnStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DynamicData.Protos.SysColumnStruct> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListColumnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListColumnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalRecords != other.TotalRecords) return false;
      if(!columns_.Equals(other.columns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalRecords != 0) hash ^= TotalRecords.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalRecords != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalRecords);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalRecords != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalRecords);
      }
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalRecords != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRecords);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListColumnResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalRecords != 0) {
        TotalRecords = other.TotalRecords;
      }
      columns_.Add(other.columns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalRecords = input.ReadInt32();
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
