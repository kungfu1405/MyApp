<div class="modal fade" id="modal-edit" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-xl">
        <div class="modal-content">
            <div class="modal-body">
                <div class="card-body">
                    <div class="form-group row">
                        <div class="col-12">
                            <input type="text" id="edit_title" required placeholder="Add a Title" class="form-control shadow-none" name="txtTitle" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-sm-12 col-lg-6 col-md-6  my-select2">
                            <select class="form-control" id="edited_destination"></select>
                        </div>
                        <div class="col-sm-12 col-lg-6 col-md-6 my-select2">
                            <select class="js-example-basic-single js-states form-control" id="edited_attraction"></select>
                        </div>
                    </div>
                    <div class="form-group row" style="padding-left: 15px;">
                        <div class="col-12">
                            <div id="editor_edit"></div>
                        </div>
                    </div>
                    <div class="form-group dropzone row dropzone-box dropzone-box_edit" style="padding-left: 15px;">
                        <div class="upload-image" style="float: left;">
                            <div class="dropzone dropzone-default idDropzone" id="kt_dropzone_edit">
                                <div class="dropzone-msg dz-message needsclick">
                                    <h3 class="dropzone-msg-title">+ Add Photos</h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer" style="overflow: hidden;">
                    <label class="txtStt_edit" style="float: left;"></label>
                    <a class="btn btn-primary float-right ml-3" data-id="" id="btnEdit">Save</a>
                    <a class="btn btn-secondary float-right" data-dismiss="modal">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div aria-live="polite" aria-atomic="true" style="position: fixed; top: 0; right: 20px; min-height: 200px;">
    <div style="position: absolute; top: 10px; right: 0;min-width: 250px;">
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="3000">
            <div class="toast-header line-height-lg">
                <strong class="mr-auto">Pickpack</strong>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>    
</div>

<script type="text/javascript">
    function addSession(obj) {
        $(".addSession").find("span").removeClass("active");
        var count = $(obj).attr("data-sess");
        count++;
        var checkAdd = true;
        $("input.upload-input").each(function (index, input) {
            if ($(input).val() == "") {
                checkAdd = false;
                $(input).focus();
                notifi("error", "Please, Input Title!");
            }
        });

        if (!checkAdd)
            return;

        var template = `<div class="card card-custom card-upload-section" id="card_` + count + `" style="margin-bottom: 50px;">
            <form id="frmUpload_`+ count +`">
                <div class="card-body">
                    <div class="form-group row">
                        <div class="col-12">
                            <input type="text" onkeyup="checkText(this)" id="upload_title_`+ count +`" required placeholder="Add a Title" class="form-control shadow-none upload-input" name="txtTitle" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-sm-12 col-lg-6 col-md-6  my-select2">
                            <select class="form-control" id="mySelect2_`+ count +`_destination"></select>
                        </div>

                        <div class="col-sm-12 col-lg-6 col-md-6 my-select2">
                            <select class="js-example-basic-single js-states form-control" id="mySelect2_`+ count +`_attraction"></select>
                        </div>
                    </div>
                    <div class="form-group row" style="padding-left: 15px;">
                        <div class="col-12">
                            <div id="editor_`+ count +`" class="txtDes"></div>
                        </div>
                    </div>

                    <div class="form-group dropzone row dropzone-box dropzone-box_1 dropzone-preview-`+ count +`" style="padding-left: 15px;">
                        <div class="upload-image" style="float: left;">
                            <div class="dropzone dropzone-default idDropzone" id="kt_dropzone_upload_`+ count +`">
                                <div class="dropzone-msg dz-message needsclick">
                                    <h3 class="dropzone-msg-title">+ Add Photos</h3>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <a class="btnUploadSection" onclick="uploadSection(this)" id="btnUpload_`+ count +`" style="float: right;">Publish</a>
                    </div>
                </div>
            </form>
        </div>`;

        $(".addSession").append($("<span>").html(count).attr("onclick", "scrollToUpload('#card_"+ count +"')"));
        $(obj).attr("data-sess", count);

        $("#session-upload").append(template);
        var id = "kt_dropzone_upload_" + count;

        //Drozone Upload Image
        $("#" + id).dropzone({
            url: "@(string.Format("{0}/api/file/upload", UrlList.FileServer))", // Set the url for your upload script location
            paramName: "file", // The name that will be used to transfer the file
            maxFiles: 10,
            maxFilesize: 10, // MB
            autoQueue: false,
            addRemoveLinks: true,
            thumbnailWidth: 900,
            thumbnailHeight: 900,
            acceptedFiles: ".jpeg,.jpg,.png,.gif",
            previewsContainer: ".dropzone-preview-" + count,
            removeAllFiles: true
        });

        //Quill Editor
        var options = {
            modules: {
                toolbar: false
            },
            placeholder: 'Add a Description',
            theme: 'snow'
        };
        new Quill("#editor_" + count, options);
        scrollToUpload("#card_" + count);

        //Autocomplete attraction & destination
         //Auto compele Destination / Attraction
        $("#mySelect2_" + count + "_destination").select2({
            minimumInputLength: 2,
            allowClear: true,
            placeholder: 'Pin To Your Destination',
            ajax: {
                url: '@Url.Action("Destination", "Search")',
                dataType: 'json',
                delay: 250,
                cache: true,
                data: function (params) {
                    var queryParameters = {
                        keyword: params.term,
                    }
                    return queryParameters;
                },
                processResults: function (data, params) {
                    return { results: data };
                }
            }
        }).on('change', function () {
            $(this).trigger('blur');
        });


        $("#mySelect2_"+ count +"_attraction").select2({
            minimumInputLength: 2,
            allowClear: true,
            placeholder: 'Pin To Your Attraction',
            ajax: {
                url: '@Url.Action("Attraction", "Search")',
                dataType: 'json',
                delay: 250,
                cache: true,
                data: function (params) {
                    var destinationId = $("#mySelect2_"+ count +"_destination").val();
                    //debugger
                    var queryParameters = {
                        keyword: params.term,
                        destinationId: destinationId != null ? destinationId: null
                    }
                    return queryParameters;
                },
                processResults: function (data, params) {
                    return { results: data };
                }
            }
        }).on('change', function () {
            $(this).trigger('blur');
        });
    }

    function checkText(obj) {
        var parent = $(obj).parents(".card");
        var btn = parent.find(".btnUploadSection");
        var mainTitle = $("#upload_main_title");
        if (mainTitle.length > 0 && mainTitle.val().length <= 0)
        {
            btn.removeClass("active");
            return;
        }

        if ($(obj).val().length > 0) {
            btn.addClass("active");
        }
        else {
            btn.removeClass("active");
        }
    }

    function checkMainText(obj) {
        var txtMain = $(obj).val();
        if (txtMain.length <= 0) {
            $(".btnUploadSection").removeClass("active");
            return;
        }            

        var card = $(".card").not("#main-card");
        card.each(function () {
            if ($(this).find("input[name=txtTitle]").val().length > 0) {
                $(this).find(".btnUploadSection").addClass("active");
            }
            else {
                $(this).find(".btnUploadSection").removeClass("active");
            }
        });
    }

    function notifi(type, mess) {
        var className = "";

        if (type == "success") {
            className = "text-success";
        }
        else if (type == "error") {
            className = "text-danger";
        }
        else {
            className = "text-default";
        }
        var txtMess = $("<div>").html(mess)
            .addClass(className);

        $(".toast-body").empty().append(txtMess);
        $(".toast").toast("show")
    }

    function getSession(id, title, description, thumb) {
        var exImg = "";
        if (thumb.length > 1) {
            exImg += `<div id="session-` + id + `" class="carousel slide" data-interval="false" data-ride="carousel">
                        <ol class="carousel-indicators">`;

            for (var i = 0; i < thumb.length; i++) {
                if (i == 0)
                    exImg += `<li data-target="#` + id + `" data-slide-to="` + i + `" class="active"></li>`;
                else
                    exImg += `<li data-target="#` + id + `" data-slide-to="` + i + `"></li>`;
            }
            exImg += ` </ol>
                <div class="carousel-inner">`;

            for (var j = 0; j < thumb.length; j++) {
                if(j == 0)
                    exImg += `<div class="carousel-item active">
                            <img class="d-block w-100" src="@(UrlList.FileServer)`+ thumb[j].imagerUrl + `">
                        </div>`;
                else
                    exImg += `<div class="carousel-item">
                            <img class="d-block w-100" src="@(UrlList.FileServer)`+ thumb[j].imagerUrl + `">
                        </div>`;
            }
            exImg += `</div>`;
            exImg += `  <a class="carousel-control-prev" href="#session-` + id + `" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#session-`+ id + `" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>`;
            exImg += `</div>`;
        }
        else if(thumb.length == 1) {
            exImg += `<img style="margin-bottom: 5px;" src="@(UrlList.FileServer)` + thumb[0].imagerUrl + `">`;
        }

        var temp = `
            <div id="`+ id +`" class="col-lg-9 col-md-9 col-xl-9 col-sm-12 ex-edit exp-item" style="margin: 0 auto;position: relative;">
            <div class="ex-content">
            <h2>`+ title +`</h2>
            <p class="ex-author"></p>
            <p class="ex-date">

            </p>
            <div class="ex-thumb" style="margin-bottom: 20px;">
            `+ exImg +`
            </div>

            <div class="ex-des">`+ description +`</div>

            <div class="ex-edit-setting">
                <a class="ex-edit-session" data-edited="0" onclick="editSession('`+ id + `', this)">Edit</a>
                <a class="ex-delete-session" onclick="deleteSession('`+ id +`')">Delete</a>
            </div>
            <a class="ex-read-more" alt-show="more" onclick="readMore(this)">[Read More]</a>
            </div>
            </div>
            `;

        if (document.getElementById(id)) {
            $("main.main-content").find("#" + id).replaceWith(temp);
        }
        else {
            //if (expId == undefined && expId == "")
            $("main.main-content").append(temp);
            //else
            //    $(temp).insertBefore("#session-upload");
        }


        $('.carousel').carousel({
            touch: true
        });

        //gen number section fix top left
        checkNumSection();

        //document.getElementById(id).scrollIntoView();
        scrollToUpload("#"+id);
    }

    function checkNumSection() {
        //gen number scroll fix top left
        var listItem = $(".exp-item");

        if (listItem.length > 1) {
            var tempScroll = ``;
            for (var i = 1; i < listItem.length; i++) {
                tempScroll += `<span data-scroll="` + i + `" onclick="scrollToExpSection(this)">` + i + `</span>`;
            }

            $(".addSession").find("span").remove();
            $(".addSession").append(tempScroll);
            $(".addBtn").attr("data-sess", (listItem.length - 1));
        }
    }

    function readMore(obj) {

        var des = $(obj).parent().find(".ex-des");
        var alt = $(obj).attr("alt-show");
        if (alt == "more") {
            des.css("height", "auto");
            $(obj).text("[Read Less]").attr("alt-show", "less");
        }
        else {
            des.css("height", "9em");
            $(obj).text("[Read More]").attr("alt-show", "more");
        }
    }

    function editSession(id, _this) {
        var flgEdit = $(_this).attr("data-edited");
        if (flgEdit == 0) {
            if (quillEdit == undefined) {
                var quillEdit = new Quill('#editor_edit', {
                    modules: {
                        toolbar: false
                    },
                    placeholder: 'Add a Description',
                    theme: 'snow'
                });
            }

            $('#kt_dropzone_edit').each(function () {

                let dropzoneControl = $(this)[0].dropzone;
                if (dropzoneControl) {
                    dropzoneControl.destroy();
                }
            });

            var myDropzoneEdit = new Dropzone("#kt_dropzone_edit", {
                url: "@(string.Format("{0}/api/file/upload", UrlList.FileServer))", // Set the url for your upload script location
                paramName: "file", // The name that will be used to transfer the file
                maxFiles: 10,
                maxFilesize: 10, // MB
                autoQueue: false,
                addRemoveLinks: true,
                thumbnailWidth: 230,
                thumbnailHeight: 230,
                acceptedFiles: ".jpeg,.jpg,.png,.gif",
                previewsContainer: ".dropzone-box_edit"
            });

            // On all files removed
            myDropzoneEdit.on("removedfile", function (file) {
                var index = editFiles.indexOf(file.url);
                if (index !== -1) {
                    editFiles.splice(index, 1);
                }
            });

            myDropzoneEdit.on("addedfiles", function (file) {
                var dataFrEdit = new FormData();
                var dataPreEdit = [];
                $.each(myDropzoneEdit.files, function (i, file) {
                    if (file.preload)
                        dataPreEdit.push(file.url);
                    else
                        dataFrEdit.append('file', file);
                });

                if (myDropzoneEdit.files.length == 0) {
                    alert("You should be select any file");
                //}
                //else if (myDropzoneEdit.getRejectedFiles().length > 0) {
                //    alert("The attached file is invalid");
                } else {
                    //console.log(myDropzone2); return;
                myDropzoneEdit.processQueue();
                    $.ajax({
                        url: "@(string.Format("{0}/api/file/upload", UrlList.FileServer))",
                        type: "POST",
                        data: dataFrEdit ,
                        processData: false,
                        contentType: false,
                        enctype: "multipart/form-data",
                        beforeSend: function () {

                        },
                        success: function (data, textStatus, xhr) {
                            editFiles = [];
                            if (dataPreEdit.length > 0) {
                                editFiles = dataPreEdit;
                            }

                            if (data.length > 0) {
                                editFiles = editFiles.concat(data);
                            }
                        },
                        error: function () {

                        }
                    });
                }

            });

            //Auto compele Destination / Attraction

            $("#edited_destination").select2({
                minimumInputLength: 2,
                allowClear: true,
                placeholder: 'Pin to your Destination',
                ajax: {
                    url: '@Url.Action("Search", "Destination")',
                    dataType: 'json',
                    delay: 250,
                    cache: true,
                    data: function (params) {
                        var queryParameters = {
                            keyword: params.term,
                        }
                        return queryParameters;
                    },
                    processResults: function (data, params) {
                        return { results: data };
                    }
                }
            }).on('change', function () {
                $(this).trigger('blur');
            });


            $("#edited_attraction").select2({
                minimumInputLength: 2,
                allowClear: true,
                placeholder: 'Pin to your attraction',
                ajax: {
                    url: '@Url.Action("Search", "Attraction")',
                    dataType: 'json',
                    delay: 250,
                    cache: true,
                    data: function (params) {
                        var destinationId = $("#edited_destination").val();
                        //debugger
                        var queryParameters = {
                            keyword: params.term,
                            destinationId: destinationId != null ? destinationId: null
                        }
                        return queryParameters;
                    },
                    processResults: function (data, params) {
                        return { results: data };
                    }
                }
            }).on('change', function () {
                $(this).trigger('blur');
            });

            $.ajax({
                url: "/Session/GetSession",
                type: "POST",
                data: { id: id },
                success: function (data) {
                    $("#edit_title").val(data.experience.title);
                    quillEdit.setText(data.experience.detail);
                    if (data.experience.images.length > 0) {
                        editFiles = [];
                        for (var i = 0; i < data.experience.images.length; i++) {
                            var mockFile = {
                                name: data.experience.images[i].imagerUrl.replace(/^.*[\\\/]/, ''),
                                size: 230,
                                type: 'image/' + data.experience.images[i].imagerUrl.split('.').pop(),
                                status: Dropzone.ADDED,
                                url: "@(UrlList.FileServer)" + data.experience.images[i].imagerUrl,
                                preload: true
                            };

                            // Call the default addedfile event handler
                            myDropzoneEdit.emit("addedfile", mockFile);

                            // And optionally show the thumbnail of the file:
                            myDropzoneEdit.emit("thumbnail", mockFile, "@(UrlList.FileServer)" + data.experience.images[i].imagerUrl);

                            myDropzoneEdit.files.push(mockFile);
                            editFiles.push("@(UrlList.FileServer)" + data.experience.images[i].imagerUrl);

                            //Auto Complete
                            if (data.attraction.id != undefined && data.attraction.id != null) {
                                var dataAttSelected = {
                                    id: data.attraction.id,
                                    text: data.attraction.defaultName
                                };

                                var newAttOption = new Option(dataAttSelected.text, dataAttSelected.id, false, false);
                                $('#edited_attraction').append(newAttOption).trigger('change');
                            }

                            if (data.destination.id != undefined && data.destination.id != null) {
                                var dataDesSelected = {
                                    id: data.destination.id,
                                    text: data.destination.defaultName
                                };

                                var newDesOption = new Option(dataDesSelected.text, dataDesSelected.id, false, false);
                                $('#edited_destination').append(newDesOption).trigger('change');
                            }
                        }
                    }
                }
            });
            $(_this).attr("data-edited", 1);
            $("#btnEdit").attr("data-id", id);
        }

        $("#modal-edit").modal("show");
    }

    function deleteSession(id) {
        $("#mi-modal").modal('show');
        var flg = 0;
        $("#modal-btn-si").on("click", function (e) {
            e.preventDefault();
            flg++;
            if (flg == 1) {
                $.ajax({
                    url: "/Session/Delete",
                    data: { id: id, experienceId: expId },
                    type: "POST",
                    success: function (data) {
                        if (data.status == 1) {
                            $("#" + id).slideUp(500, function () {
                                $(this).remove();
                                checkNumSection();
                            });
                            notifi("error", "Delete Success");
                        }
                        else {
                            console.log(data.mess);
                            notifi("error", data.mess);
                        }
                    },
                    error: function () {

                    }
                });
            }
            $("#mi-modal").modal('hide');
        });

        $("#modal-btn-no").on("click", function () {
            $("#mi-modal").modal('hide');
        });
    }

    function scrollToUpload(element) {
        var body = $("html, body");
        try {
            var topUpload = $(element).offset().top - 50;
            body.stop().animate({ scrollTop: topUpload }, 500, 'swing');
        }
        catch (e) {
            console.log(e);
        }
    }

    $(document).ready(function () {
        $("#btnEdit").on("click", function (e) {
            e.preventDefault();
            var id = $("#btnEdit").attr("data-id");
            var txtTitle = $("input#edit_title").val();
            //var des = $("#txtDes").val();
            if (quillEdit == undefined) {
                var quillEdit = new Quill('#editor_edit', {
                    modules: {
                        toolbar: false
                    },
                    placeholder: 'Add a Description',
                    theme: 'snow'
                });
            }
            var des = quillEdit.getText();

            var regex = /(<([^>]+)>)/ig
            hasText = !!des.replace(regex, "").length;

            var errMess = "";

            if (txtTitle.length <= 0) {
                errMess = "Please Input Title!";
            }
            else if (!hasText) {
                errMess = "Please Input Description!";
            }
            else if (editFiles.length == 0) {
                errMess = "Please Select Any File!";
            }

            var attraction = $("#edited_attraction").val();
            //if (errMess.length > 0) {
            //    $(".txtStt_Upload").empty().removeClass("text-success").addClass("text-danger").html(errMess);
            //    return;
            //}

            var data = {
                title: txtTitle,
                description: des,
                files: editFiles,
                id: id,
                attractionId: attraction
            };

            $.ajax({
                url: "/Session/Edit",
                type: "POST",
                data: data,
                //dataType: "json",
                beforeSend: function () {
                    //$(".txtStt_Upload").removeClass("text-danger").removeClass("text-success").empty().html("Uploading ...");
                    $("#btnEdit").css("display", "none");
                },
                success: function (data, textStatus, xhr) {
                    //myDropzoneEdit.removeAllFiles(true);
                    $("#edit_title").val('');
                    quillEdit.setText('');

                    if (data.data.images.length > 0) {
                        getSession(data.data.id, data.data.title, data.data.detail, data.data.images);
                    }
                    else {
                        getSession(data.data.id, data.data.title, data.data.detail, "");
                    }
                    $("#modal-edit").modal("hide");
                },
                error: function () {
                    //$(".txtStt_Upload").empty().removeClass("text-success").addClass("text-danger").html("Upload Fail. Please Contact Admin.");
                },
                complete: function () {
                    $("#btnEdit").css("display", "block");
                }
            });
        });
    });

    function uploadSection(obj) {
        var parent = $(obj).parents(".card");
        //console.log(parent);
        var imgs = parent.find("img");

        var txtTitle = parent.find("input[name=txtTitle]").val();
        //var des = $("#txtDes").val();
        var des = parent.find(".txtDes").prop("innerText");
        console.log(des.length);
        var errMess = "";

        if (txtTitle.length <= 0) {
            errMess = "Please Input Title!";
        }
        else if (des.length <= 1) {
            errMess = "Please Input Description!";
        }
        else if (imgs.length == 0) {
            errMess = "Please Select Any File!";
        }

        if (errMess.length > 0) {
            notifi("error", errMess);
            return;
        }

        var dataFr = new FormData();
        var dataFiles = [];
        $.each(imgs, function (i, file) {
            dataFr.append('file', dataURLtoFile(file.currentSrc, file.alt));
            //dataFr.append('file', srcToFile(file.currentSrc, file.alt, "image/png"));
            //dataFr.append('file', dataURItoBlob(file.currentSrc, file.alt));
        });
        //console.log(imgs);return;
        $.ajax({
            url: "@(string.Format("{0}/api/file/upload", UrlList.FileServer))",
            type: "POST",
            data: dataFr,
            processData: false,
            contentType: false,
            enctype: "multipart/form-data",
            beforeSend: function () {

            },
            success: function (response, textStatus, xhr) {
                if (response.length > 0) {
                    var dataPost = {
                        title: txtTitle,
                        description: des,
                        files: response,
                        experienceId: expId
                    };

                    $.ajax({
                        url: "/Session/Upload",
                        type: "POST",
                        data: dataPost,
                        //dataType: "json",
                        beforeSend: function () {
                            //$(".txtStt_Upload").removeClass("text-danger").removeClass("text-success").empty().html("Uploading ...");
                            parent.find(".btnUploadSection").css("display", "none");
                        },
                        success: function (data, textStatus, xhr) {
                            if (data.status == 1) {
                                notifi("success", "Upload Success!")
                                expId = data.data.experienceId;
                                parent.remove();
                                if (data.data.images.length > 0) {
                                    getSession(data.data.id, data.data.title, data.data.detail, data.data.images);
                                }
                                else {
                                    getSession(data.data.id, data.data.title, data.data.detail, "");
                                }

                            }
                            else {
                                notifi("error", "Upload Fail!");
                                //$(".txtStt_Upload").empty().removeClass("text-success").addClass("text-danger").html("Upload Fail!");
                            }
                        },
                        error: function () {
                            notifi("error", "Upload Fail. Please Contact Admin!");
                            //$(".txtStt_Upload").empty().removeClass("text-success").addClass("text-danger").html("Upload Fail. Please Contact Admin.");
                        },
                        complete: function () {
                            parent.find(".btnUploadSection").css("display", "none");
                        }
                    });
                }
                else {
                    errMess = "Upload Image Fail!";
                }
            },
            error: function () {

            }
        });

        if (errMess.length > 0) {
            notifi("error", errMess);
            return;
        }
    };

    function dataURLtoFile(dataurl, filename) {
        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new File([u8arr], filename, { type: mime });
    }

    function srcToFile(src, fileName) {
        var arr = src.split(','),
            mimeType = arr[0].match(/:(.*?);/)[1];

        return (fetch(src)
            .then(function (res) { return res.arrayBuffer(); })
            .then(function (buf) { return new File([buf], fileName, { type: mimeType }); })
        );
    }

    function dataURItoBlob(dataURI, fileName) {
        // convert base64/URLEncoded data component to raw binary data held in a string
        var byteString;
        if (dataURI.split(',')[0].indexOf('base64') >= 0)
            byteString = atob(dataURI.split(',')[1]);
        else
            byteString = unescape(dataURI.split(',')[1]);

        // separate out the mime component
        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

        // write the bytes of the string to a typed array
        var ia = new Uint8Array(byteString.length);
        for (var i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }

        return new Blob([ia], { type: mimeString, filename: fileName });
    }

    function scrollToExpSection(obj) {
        var listItem = $(".exp-item"),
            itemScroll = $(obj).attr("data-scroll");

        scrollToUpload(listItem[itemScroll]);

        console.log($(".addSession span[data-sess=" + itemScroll + "]"));
        $(".addSession span").removeClass("active");
        $(obj).addClass("active");

    }
</script>